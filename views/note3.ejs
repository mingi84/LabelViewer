<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script language="javascript" type="text/javascript" src="js/jquery-3.6.4.min.js"></script>
    <script language="javascript" type="text/javascript" src="js/bootstrap.bundle.js"></script>
    <script language="javascript" type="text/javascript" src="js/fontawesome.all.min.js"></script>
    <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="css/fontawesome.all.css">
    <link rel="stylesheet" type="text/css" href="css/main.css">
    <script language="javascript" type="text/javascript" src="js/globalconst.js"></script>
    <%- include('./header') %>
</head>
<style>
    .b-box-type {
        font-weight: 800;
        height: 240px;
    }

    .template-type:hover {
        background: #EBECF1;
    }

    .b-box-type:hover {
        background: #EBECF1;
    }


    .highlight-text {
        color: #5174EE;
    }

    canvas {
        cursor: crosshair;
    }

    .checkbutton {
        cursor: pointer;
    }

    .active {
        background-color: #F1F1F1;
    }

    .hide {
        display: none;
    }
</style>
<!--

-->

<body>
    <div class="container-fluid">
        <div class="row">

            <nav id="sidebarMenu" class="col-md-2 col-lg-2 d-md-block bg-body-tertiary sidebar collapse px-3 mb-1">
                <form onsubmit="return false;">
                    <h4
                        class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                        <span><b>Create Template</b></span>
                    </h4>
                    <div class="position-sticky pt-3 sidebar-sticky">
                        <div class="col-md-12 col-lg-12">
                            <div class="row g-3">
                                <div class="col-sm-9">
                                    <label for="firstName" class="form-label">Name</label>
                                    <input type="text" class="form-control" id="template-name"
                                        placeholder="Template name" value="" required>
                                    <div class="invalid-feedback">
                                        Valid template name is required.
                                    </div>
                                </div>
                            </div>

                            <div class="row g-3 mb-2">

                                <div class="col">
                                    <label class="" for="firstName" class="form-label">Select line color: </label>
                                    <input class="pt-2" type="color" name="mycolor" value="#0000FF" id="template-color"
                                        style="width: 1.5em; height: 2em; border: none;" data-bs-toggle="tooltip"
                                        data-bs-placement="right" data-bs-title="Color Picker">
                                </div>
                            </div>

                            <div class="row g-3">

                                <div class="col">
                                    <input type="checkbox" class="btn-check" id="btn-boundingbox" name="template-type"
                                        autocomplete="off" onclick="typeClick('boundingbox');">
                                    <label class="checkbutton w-100" for="btn-boundingbox">
                                        <div class="card w-100 active" style="width: 18rem;" id="card-boundingbox">
                                            <div class="card-body ">
                                                <div class="d-flex justify-content-between mb-2">
                                                    <svg class="svg-inline--fa fa-square" style="font-size: 40px;"
                                                        aria-hidden="true" focusable="false" data-prefix="far"
                                                        data-icon="square" role="img" xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 448 512" data-fa-i2svg="">
                                                        <path fill="currentColor"
                                                            d="M384 80c8.8 0 16 7.2 16 16V416c0 8.8-7.2 16-16 16H64c-8.8 0-16-7.2-16-16V96c0-8.8 7.2-16 16-16H384zM64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64z">
                                                        </path>
                                                    </svg><!-- <i class="fa-regular fa-square" style="font-size: 40px;"></i> Font Awesome fontawesome.com -->
                                                    <h5 class="py-2"><b> Bounding Box</b></h5>
                                                </div>
                                                <div style="color: #666666;">Enter the information for drawing the
                                                    bounding box.
                                                </div>
                                            </div>
                                        </div>
                                    </label>
                                </div>
                            </div>


                            <div class="row g-3">
                                <div class="col">

                                    <input type="checkbox" class="btn-check" id="btn-keypoint" name="template-type"
                                        autocomplete="off" onclick="typeClick('keypoint');" checked="">
                                    <label class="checkbutton w-100" for="btn-keypoint">
                                        <div class="card w-100 active" style="width: 18rem;" id="card-keypoint">
                                            <div class="card-body ">
                                                <div class="d-flex justify-content-between mb-2">
                                                    <svg class="svg-inline--fa fa-draw-polygon" style="font-size: 40px;"
                                                        aria-hidden="true" focusable="false" data-prefix="fas"
                                                        data-icon="draw-polygon" role="img"
                                                        xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"
                                                        data-fa-i2svg="">
                                                        <path fill="currentColor"
                                                            d="M96 151.4V360.6c9.7 5.6 17.8 13.7 23.4 23.4H328.6c0-.1 .1-.2 .1-.3l-4.5-7.9-32-56 0 0c-1.4 .1-2.8 .1-4.2 .1c-35.3 0-64-28.7-64-64s28.7-64 64-64c1.4 0 2.8 0 4.2 .1l0 0 32-56 4.5-7.9-.1-.3H119.4c-5.6 9.7-13.7 17.8-23.4 23.4zM384.3 352c35.2 .2 63.7 28.7 63.7 64c0 35.3-28.7 64-64 64c-23.7 0-44.4-12.9-55.4-32H119.4c-11.1 19.1-31.7 32-55.4 32c-35.3 0-64-28.7-64-64c0-23.7 12.9-44.4 32-55.4V151.4C12.9 140.4 0 119.7 0 96C0 60.7 28.7 32 64 32c23.7 0 44.4 12.9 55.4 32H328.6c11.1-19.1 31.7-32 55.4-32c35.3 0 64 28.7 64 64c0 35.3-28.5 63.8-63.7 64l-4.5 7.9-32 56-2.3 4c4.2 8.5 6.5 18 6.5 28.1s-2.3 19.6-6.5 28.1l2.3 4 32 56 4.5 7.9z">
                                                        </path>
                                                    </svg><!-- <i class="fa-solid fa-draw-polygon" style="font-size: 40px;"></i> Font Awesome fontawesome.com -->
                                                    <h5 class="pt-2 pl-4">Key Point</h5>
                                                </div>
                                                <div style="color: #666666;">Draw and match keypoints with Json
                                                    information.
                                                </div>
                                            </div>
                                        </div>
                                    </label>
                                </div>
                            </div>

                            <div class="row g-3">

                                <div class="col">
                                    <input type="checkbox" class="btn-check" id="btn-polygon" name="template-type"
                                        autocomplete="off">
                                    <label class="checkbutton w-100" for="btn-polygon" style="cursor: not-allowed;">
                                        <div class="card w-100" style="width: 18rem;" id="card-googledrive">
                                            <div class="card-body ">
                                                <div class="d-flex mb-2 align-middle">
                                                    <svg class="svg-inline--fa fa-draw-polygon"
                                                        style="font-size: 40px; color: #666666;" aria-hidden="true"
                                                        focusable="false" data-prefix="fas" data-icon="draw-polygon"
                                                        role="img" xmlns="http://www.w3.org/2000/svg"
                                                        viewBox="0 0 448 512" data-fa-i2svg="">
                                                        <path fill="currentColor"
                                                            d="M96 151.4V360.6c9.7 5.6 17.8 13.7 23.4 23.4H328.6c0-.1 .1-.2 .1-.3l-4.5-7.9-32-56 0 0c-1.4 .1-2.8 .1-4.2 .1c-35.3 0-64-28.7-64-64s28.7-64 64-64c1.4 0 2.8 0 4.2 .1l0 0 32-56 4.5-7.9-.1-.3H119.4c-5.6 9.7-13.7 17.8-23.4 23.4zM384.3 352c35.2 .2 63.7 28.7 63.7 64c0 35.3-28.7 64-64 64c-23.7 0-44.4-12.9-55.4-32H119.4c-11.1 19.1-31.7 32-55.4 32c-35.3 0-64-28.7-64-64c0-23.7 12.9-44.4 32-55.4V151.4C12.9 140.4 0 119.7 0 96C0 60.7 28.7 32 64 32c23.7 0 44.4 12.9 55.4 32H328.6c11.1-19.1 31.7-32 55.4-32c35.3 0 64 28.7 64 64c0 35.3-28.5 63.8-63.7 64l-4.5 7.9-32 56-2.3 4c4.2 8.5 6.5 18 6.5 28.1s-2.3 19.6-6.5 28.1l2.3 4 32 56 4.5 7.9z">
                                                        </path>
                                                    </svg><!-- <i class="fa-solid fa-draw-polygon" style="font-size: 40px; color: #666666;"></i> Font Awesome fontawesome.com -->
                                                    <spam class="align-middle">Polygon</spam>
                                                </div>
                                                <div style="color: #666666;">
                                                    Add storage registered to an existing data injector.
                                                </div>
                                            </div>
                                        </div>
                                    </label>
                                </div>
                            </div>





                        </div>
                    </div>
                </form>
            </nav>

            <main class="col-md-10 ms-sm-auto col-lg-10 px-md-4">
                <h4
                    class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
                    <span><b>Draw Template</b></span>
                </h4>

                <div id="type-boundingbox" style="">
                    <h5>Bounding Box Type</h5>
                    <div class="row row-cols-4 mb-4" id="gallerylist">
                        <div class="col">
                            <input type="radio" class="btn-check" name="b-box-type" id="type-1" value="1"
                                autocomplete="off" onclick="selectBboxdraw(this.id)" checked="">
                            <label class="w-100" for="type-1">
                                <div class="card w-100 b-box-type active" id="card-type-1">
                                    <div class="card-body d-flex flex-column ">
                                        <img class="align-self-center" src="img/type1.png">
                                        <div class="mt-auto align-self-center">(x,y),w,h</div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div class="col">
                            <input type="radio" class="btn-check" name="b-box-type" id="type-2" value="2"
                                autocomplete="off" onclick="selectBboxdraw(this.id)">
                            <label class="w-100" for="type-2">
                                <div class="card w-100 b-box-type" id="card-type-2">
                                    <div class="card-body d-flex flex-column ">
                                        <img class="align-self-center" src="img/type2.png">
                                        <div class="mt-auto align-self-center">(x1,y1),(x2,y2)</div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div class="col">
                            <input type="radio" class="btn-check" name="b-box-type" id="type-3" value="3"
                                autocomplete="off" onclick="selectBboxdraw(this.id)">
                            <label class="w-100" for="type-3">
                                <div class="card w-100 b-box-type" id="card-type-3">
                                    <div class="card-body d-flex flex-column">
                                        <img class="align-self-center" src="img/type3.png">
                                        <div class="mt-auto align-self-center">(x,y),w,h</div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div class="col">
                            <input type="radio" class="btn-check" name="b-box-type" id="type-etc" value="etc"
                                autocomplete="off">
                            <label class="w-100" for="type-etc">
                                <div class="card w-100 b-box-type" id="card-type-etc">
                                    <div class="card-body d-flex justify-content-center  align-content-center">
                                        <div class="card-text align-self-center">ETC (Coming Soon) </div>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>
                    <div class="" style="color: #666666;">Please enter the information of the label JSON in the
                        selected bounding box type.</div>
                    <div class="mb-4" style="color: #666666;">* JSON substructure <span
                            class="highlight-text">&gt;&gt;</span>, Array <span class="highlight-text">[]</span></div>

                    <div id="input-drawtype">
                        <div class="row">
                            <div class="col">
                                <div class="" id="name-x">X</div>
                                <div class="input-group mb-2">
                                    <div class="input-group mb-2">
                                        <input type="text" class="form-control" id="bbox-x"
                                            aria-describedby="basic-addon1">
                                    </div>
                                </div>
                            </div>
                            <div class="col">
                                <div class="" id="name-y">Y</div>
                                <div class="input-group mb-2">
                                    <div class="input-group mb-2">
                                        <input type="text" class="form-control" id="bbox-y"
                                            aria-describedby="basic-addon1">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row mb-4">
                            <div class="col">
                                <div class="" id="name-w">W</div>
                                <div class="input-group mb-2">
                                    <div class="input-group mb-2">
                                        <input type="text" class="form-control" id="bbox-w"
                                            aria-describedby="basic-addon1">
                                    </div>
                                </div>
                            </div>
                            <div class="col">
                                <div class="" id="name-h">H</div>
                                <div class="input-group mb-2">
                                    <div class="input-group mb-2">
                                        <input type="text" class="form-control" id="bbox-h"
                                            aria-describedby="basic-addon1">
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>



                <canvas class="my-4 w-100" id="myChart" width="3104" height="1310"
                    style="display: block; box-sizing: border-box; height: 655px; width: 1552px;"></canvas>

            </main>

        </div>

    </div>






    <div>
        <div class="container my-4">
            <div class="row" id="gallerylist">
                <div class="col">
                    <h4>Create Template</h4>
                    <div class="mb-4" style="color: #666666;">Add a gallery to Label Viewer</div>

                    <div class="row row-cols-3 mb-4" id="gallerylist">
                        <div class="col">
                            <input type="checkbox" class="btn-check" id="btn-boundingbox" name="template-type"
                                autocomplete="off" onclick="typeClick('boundingbox');">
                            <label class="checkbutton w-100" for="btn-boundingbox">
                                <div class="card w-100" style="width: 18rem;" id="card-boundingbox">
                                    <div class="card-body ">
                                        <div class="d-flex justify-content-between mb-4">
                                            <i class="fa-regular fa-square" style="font-size: 40px;"></i>
                                            <h5>Bounding Box</h5>
                                        </div>
                                        <div style="color: #666666;">Enter the information for drawing the bounding box.
                                        </div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div class="col">
                            <input type="checkbox" class="btn-check" id="btn-keypoint" name="template-type"
                                autocomplete="off" onclick="typeClick('keypoint');" checked>
                            <label class="checkbutton w-100" for="btn-keypoint">
                                <div class="card w-100 active" style="width: 18rem;" id="card-keypoint">
                                    <div class="card-body ">
                                        <div class="d-flex justify-content-between mb-4">
                                            <i class="fa-solid fa-draw-polygon" style="font-size: 40px;"></i>
                                            <h5>Key Point</h5>
                                        </div>
                                        <div style="color: #666666;">Draw and match keypoints with Json information.
                                        </div>
                                    </div>
                                </div>
                            </label>
                        </div>
                        <div class="col">
                            <input type="checkbox" class="btn-check" id="btn-polygon" name="template-type"
                                autocomplete="off">
                            <label class="checkbutton w-100" for="btn-polygon" style="cursor: not-allowed;">
                                <div class="card w-100" style="width: 18rem;" id="card-googledrive">
                                    <div class="card-body ">
                                        <div class="d-flex justify-content-between mb-4">
                                            <i class="fa-solid fa-draw-polygon"
                                                style="font-size: 40px; color: #666666;"></i>
                                            <h5>Polygon (Coming soon)</h5>
                                        </div>
                                        <div style="color: #666666;">Add storage registered to an existing data
                                            injector.
                                        </div>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>

                    <h5>Template Name</h5>
                    <div class="d-flex align-items-center column-gap-2">
                        <div class="input-group mb-4" style="max-width: 400px;">
                            <input type="text" class="form-control" id="template-name" placeholder="template name"
                                value="" required>
                        </div>
                        <div class="input-group mb-4 ">
                            <input type="color" name="mycolor" value="#FF4444" id="template-color"
                                style="width: 2em; height: 2em; border: none;" data-bs-toggle="tooltip"
                                data-bs-placement="right" data-bs-title="Color Picker">
                        </div>
                    </div>

                    <div id="type-boundingbox" style="display: none;">
                        <h5>Bounding Box Type</h5>
                        <div class="row row-cols-4 mb-4" id="gallerylist">
                            <div class="col">
                                <input type="radio" class="btn-check" name="b-box-type" id="type-1" value="1"
                                    autocomplete="off" onclick="selectBboxdraw(this.id)" checked>
                                <label class="w-100" for="type-1">
                                    <div class="card w-100 b-box-type active" id="card-type-1">
                                        <div class="card-body d-flex flex-column ">
                                            <img class="align-self-center" src="img/type1.png">
                                            <div class="mt-auto align-self-center">(x,y),w,h</div>
                                        </div>
                                    </div>
                                </label>
                            </div>
                            <div class="col">
                                <input type="radio" class="btn-check" name="b-box-type" id="type-2" value="2"
                                    autocomplete="off" onclick="selectBboxdraw(this.id)">
                                <label class="w-100" for="type-2">
                                    <div class="card w-100 b-box-type" id="card-type-2">
                                        <div class="card-body d-flex flex-column ">
                                            <img class="align-self-center" src="img/type2.png">
                                            <div class="mt-auto align-self-center">(x1,y1),(x2,y2)</div>
                                        </div>
                                    </div>
                                </label>
                            </div>
                            <div class="col">
                                <input type="radio" class="btn-check" name="b-box-type" id="type-3" value="3"
                                    autocomplete="off" onclick="selectBboxdraw(this.id)">
                                <label class="w-100" for="type-3">
                                    <div class="card w-100 b-box-type" id="card-type-3">
                                        <div class="card-body d-flex flex-column">
                                            <img class="align-self-center" src="img/type3.png">
                                            <div class="mt-auto align-self-center">(x,y),w,h</div>
                                        </div>
                                    </div>
                                </label>
                            </div>
                            <div class="col">
                                <input type="radio" class="btn-check" name="b-box-type" id="type-etc" value="etc"
                                    autocomplete="off">
                                <label class="w-100" for="type-etc">
                                    <div class="card w-100 b-box-type" id="card-type-etc">
                                        <div class="card-body d-flex justify-content-center  align-content-center">
                                            <div class="card-text align-self-center">ETC (Coming Soon) </div>
                                        </div>
                                    </div>
                                </label>
                            </div>
                        </div>
                        <div class="" style="color: #666666;">Please enter the information of the label JSON in the
                            selected bounding box type.</div>
                        <div class="mb-4" style="color: #666666;">* JSON substructure <span
                                class="highlight-text">>></span>, Array <span class="highlight-text">[]</span></div>

                        <div id="input-drawtype">
                            <div class="row">
                                <div class="col">
                                    <div class="" id="name-x">X</div>
                                    <div class="input-group mb-2">
                                        <div class="input-group mb-2">
                                            <input type="text" class="form-control" id="bbox-x"
                                                aria-describedby="basic-addon1">
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="" id="name-y">Y</div>
                                    <div class="input-group mb-2">
                                        <div class="input-group mb-2">
                                            <input type="text" class="form-control" id="bbox-y"
                                                aria-describedby="basic-addon1">
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row mb-4">
                                <div class="col">
                                    <div class="" id="name-w">W</div>
                                    <div class="input-group mb-2">
                                        <div class="input-group mb-2">
                                            <input type="text" class="form-control" id="bbox-w"
                                                aria-describedby="basic-addon1">
                                        </div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="" id="name-h">H</div>
                                    <div class="input-group mb-2">
                                        <div class="input-group mb-2">
                                            <input type="text" class="form-control" id="bbox-h"
                                                aria-describedby="basic-addon1">
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="type-keypoint">
                        <h5>Draw Keypoint</h5>
                        <div class="" style="color: #666666;">Please enter the information of the label JSON in the
                            selected bounding box type.</div>
                        <div class="mb-4" style="color: #666666;">* JSON substructure <span
                                class="highlight-text">>></span>, Array <span class="highlight-text">[]</span></div>
                        <div class="row row-cols-2 mb-4" id="gallerylist">
                            <div class="col">
                                <div class="card w-100">
                                    <button type="button" id="clearButton"
                                        class="btn btn-md btn-outline-secondary position-absolute m-2">
                                        <i class="fa-solid fa-eraser"></i>
                                    </button>
                                    <canvas id="poseCanvas" width="800" height="600"></canvas>
                                </div>

                            </div>
                            <div class="col">
                                <div class="card w-100 h-100" id="">
                                    <div class="card-body d-flex flex-column ">
                                        <div style="height: 45vh; overflow-y: auto; overflow-x: hidden;">
                                            <div class="row row-cols-3 ">
                                                <div class="col col-2 ">Point</div>
                                                <div class="col col-5">JSON Key - X</div>
                                                <div class="col col-5">JSON Key - Y</div>
                                            </div>
                                            <div id="keylist"></div>
                                            <!--<button id="saveButton" class="btn btn-md btn-primary">Save</button>-->
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>


                    </div>
                    <!--
                <div class="" style="color: #666666;">Isn't the structure of the dataset you're trying to use here?
                </div>
                <button type="button" class="btn btn-success mb-4">Contact Us</button>-->

                    <div class="col d-flex justify-content-between">
                        <button type="button" class="btn btn-lg btn-outline-primary" data-bs-toggle="modal"
                            data-bs-target="#closemodal" onclick="">Back</button>
                        <button type="submit" class="btn btn-lg btn-primary" id="saveButton"
                            onclick="infoValidation(); return false;">Next</button>
                    </div>

                </div>
            </div>
        </div>
        <div class="modal fade" id="closemodal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
            aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog  modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h1 class="modal-title fs-5" id="staticBackdropLabel">Confirm</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        Returns to the previous page without saving your input.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                        <button type="button" class="btn btn-primary"
                            onclick="pageMove('selecttemplate');">Understood</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>
<script>
    function submmitFunction(event) {
        event.preventDefault();
    }

    const urlParams = new URLSearchParams(window.location.search);
    const sto_id = urlParams.get('source_list_sto');
    const dataset_id = urlParams.get('dataset_id');

    function pageMove(page) {
        var params;
        var url = _PAGE_URL;
        switch (page) {
            case "selecttemplate":
                params = "selecttemplate?source_list_sto=" + sto_id + "&dataset_id=" + dataset_id;
                break;
        }
        window.location.href = url + params;

    }

    /*
    템플릿 정보를 전송한다.
    http://127.0.0.1:8008/apidataset/keypwrite
    */
    function sendInfo(templateInfo) {
        if (keypointID !== null) {
            updateTemplate(templateInfo);
            return;
        }
        $.ajax({
            type: 'post', //데이터 전송 타입,
            url: _PAGE_URL + 'apidataset/keypwrite', //데이터를 주고받을 파일 주소 입력,
            data: JSON.stringify(templateInfo), //보내는 데이터,
            dataType: 'JSON', //문자형식으로 받기 , 
            contentType: "application/json",
            success: function (result) {
                pageMove("selecttemplate");
            },
            error: function () {
                alert("error");
            }
        });
    }

    /*
    템플릿 정보를 업데이트한다.
    */
    function updateTemplate(templateInfo) {
        console.log(JSON.stringify(templateInfo));
        $.ajax({
            type: 'post', //데이터 전송 타입,
            url: _PAGE_URL + 'apidataset/updatekeyp?keypointId=' + keypointID, //데이터를 주고받을 파일 주소 입력,
            data: JSON.stringify(templateInfo), //보내는 데이터,
            dataType: 'JSON', //문자형식으로 받기 , 
            contentType: "application/json",
            success: function (result) {
                console.log(result);
                pageMove("selecttemplate");
            },
            error: function () {
                alert("error");
            }
        });
    }



    /*
    템플릿 저장했을 때, 필수 값 검증
    */
    function infoValidation() {
        var templateName = document.getElementById("template-name").value;
        var templateColor = document.getElementById("template-color").value;

        if (templateName == "") {
            return;
        }
        if (templateColor == "") {
            return;
        }

        maketemplateInfo(templateName, templateColor);
    }

    /*body로 보낼 템플릿 JSON을 만들어준다.*/
    function maketemplateInfo(templateName, templateColor) {
        var keypointName = getPointName();
        var jsonkey = getInputval();
        var bbox_type = $('input[name="b-box-type"]:checked').val();
        if (document.getElementById("btn-boundingbox").checked == false) {
            bbox_type = 0;
        }

        templateJson = {
            "kypt_name": templateName,
            "kypt_json": {
                "categories": [{
                    "name": templateName,
                    "color": templateColor,
                    "keypoints": keypointName,
                    "skeleton": connectingInfo
                }],
                "annotations": [{
                    "bbox_type": bbox_type,
                    "bbox": [
                        document.getElementById("bbox-x").value,
                        document.getElementById("bbox-y").value,
                        document.getElementById("bbox-w").value,
                        document.getElementById("bbox-h").value
                    ],
                    "num_keypoints": count,
                    "keypoints": keyinfo,
                    "keypoints_json": jsonkey
                }]
            }
        }

        sendInfo(templateJson);
    }

    /*
    입력한 keypoint json 정보를 불러온다.
    */
    function getInputval() {
        var pointName = [];
        var keypointJson = [];
        var point;

        for (var i = 0; i < keypoints.length; i++) {
            point = document.getElementById("point-name" + i).innerText;
            pointName.push(point);

            xVal = document.getElementById(`x${i}`).value;
            yVal = document.getElementById(`y${i}`).value;

            keypointJson.push([xVal, yVal]);
        }

        return keypointJson;
    }

    function getPointName() {
        var pointName = [];
        for (var i = 0; i < keypoints.length; i++) {
            point = document.getElementById("point-name" + i).innerText;
            pointName.push(point);
        }

        return pointName;
    }

    /*
    템플릿 타입 선택
    */
    function typeClick(type) {
        var id;

        switch (type) {
            case "boundingbox":
                btn =
                    id = "card-boundingbox"
                break;
            case "keypoint":
                id = "card-keypoint"
                break;
        }

        if (document.getElementById("btn-" + type).checked == true) {
            $('#' + id).addClass('active');
        } else {
            $('#' + id).removeClass('active');
        }
        typeShow(type);
    }

    /*
    선택한 템플릿 타입에 따라 해당하는 div를 보여준다.
    */
    function typeShow(id) {
        var clickBtn = document.getElementById("btn-" + id);

        if (clickBtn.checked == true) {
            $("#type-" + id).show();
        }
        if (clickBtn.checked == false) {
            $("#type-" + id).hide();
        }

        return;
    }

    /*
    선택한 drawtype에 맞추어, bbox input의 input박스를 바꿔준다.
    */
    function selectBboxdraw(clickradio) {
        var clickValue = $('input[name="b-box-type"]:checked').val();

        $('.b-box-type').removeClass('active');
        $('#card-type-' + clickValue).toggleClass('active');

        showBboxInput(clickValue);
    }

    /*
    선택한 drawtype에 맞추어, bbox input의 input박스를 바꿔준다.
    */
    function showBboxInput(id) {
        var x1, x2, y1, y2;

        if (id == 1 || id == 3) {

            x1 = "X";
            y1 = "Y";
            x2 = "W";
            y2 = "H";

        }
        if (id == 2) {
            x1 = "X1";
            y1 = "Y1";
            x2 = "X2";
            y2 = "Y2";
        }

        console.log(x1, y1);

        document.getElementById("name-x").innerHTML = x1;
        document.getElementById("name-y").innerHTML = y1;
        document.getElementById("name-w").innerHTML = x2;
        document.getElementById("name-h").innerHTML = y2;

    }



    const canvas = document.getElementById('poseCanvas');
    const ctx = canvas.getContext('2d');
    const {
        width,
        height
    } = canvas.getBoundingClientRect();
    canvas.width = width;
    canvas.height = height;
    const saveButton = document.getElementById('saveButton');
    const clearButton = document.getElementById('clearButton');
    const divkeylist = document.getElementById('keylist');
    let keypoints = [];
    let lines = [];
    let selectedKeypoint = null;
    let connecting = false;
    let dragging = false;
    let count = 0;
    let connectingInfo = []; //line info 전송할 때
    let keyinfo = []; //keypoints 정보 전송할 때
    var inputXY = []; //input x,y 정보

    canvas.addEventListener('mousedown', (e) => {
        if (selectedKeypoint) {
            dragging = true;
        }
    });

    canvas.addEventListener('mouseup', (e) => {
        dragging = false;
    });

    canvas.addEventListener('click', (e) => {
        if (selectedKeypoint && connecting) {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            const clickedKeypoint = keypoints.find((keypoint) => Math.sqrt(Math.pow(x - keypoint.x, 2) + Math
                .pow(y - keypoint.y, 2)) <= 5);

            if (clickedKeypoint) {
                lines.push({
                    from: selectedKeypoint,
                    to: clickedKeypoint
                });
                connectingInfo.push([selectedKeypoint.count, clickedKeypoint.count]);
                connecting = false;
                selectedKeypoint = null;
            }

        } else if (selectedKeypoint) {
            connecting = true;
        } else {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            const newKeypoint = {
                count,
                x,
                y
            };
            count++;
            keyinfo.push(x);
            keyinfo.push(y);

            keypoints.push(newKeypoint);
            console.log(keyinfo);
            console.log(keypoints);
        }

        draw();
        listkeypoints();
    });

    window.addEventListener('resize', () => {
        canvas.height = window.innerHeight;
        canvas.width = window.innerWidth;
    })

    //연결상태가 아닐 때의 마우스 이동에 대한 처리
    canvas.addEventListener('mousemove', (e) => {
        if (!connecting) {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;

            if (dragging && selectedKeypoint) {
                selectedKeypoint.x = x;
                selectedKeypoint.y = y;
            } else {
                selectedKeypoint = keypoints.find((keypoint) => Math.sqrt(Math.pow(x - keypoint.x, 2) + Math
                    .pow(y - keypoint.y, 2)) <= 5);
            }
        } else {
            draw();
        }

    });

    //저장 버튼
    function saveKeypoint() {
        const json = JSON.stringify({
            keypoints,
            lines
        });
        console.log(json);
    }

    //클리어 버튼
    clearButton.addEventListener('click', () => {
        keyinfo = [];
        keypoints = [];
        lines = [];
        inputXY = [];
        count = 0;
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        document.getElementById("keylist").innerHTML = "";
    })

    /*
    키포인트를 그린다
    */
    function draw() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        lines.forEach((line) => {
            ctx.beginPath();
            ctx.moveTo(line.from.x, line.from.y);
            ctx.lineTo(line.to.x, line.to.y);
            ctx.stroke();

        });

        keypoints.forEach((keypoint, index) => {
            ctx.beginPath();
            ctx.arc(keypoint.x, keypoint.y, 5, 0, 2 * Math.PI);
            ctx.fillStyle = selectedKeypoint === keypoint ? (connecting ? 'green' : 'red') : 'blue';
            ctx.fill();

            // Draw the text with the key value over the point
            ctx.font = '16px Arial';
            ctx.fillStyle = 'Black';
            ctx.fillText(index, keypoint.x, keypoint.y + 24);
        });
    }


    let query = window.location.search;
    let param = new URLSearchParams(query);
    let keypointID = param.get('ketpoint_id');

    $(document).ready(function () {
        if (keypointID !== null) {
            getInfo(keypointID);
        }
    });

    /*
    수정할 때, 템플릿 정보를 가져온다.
    */
    function getInfo(templateID) {

        $.ajax({
            type: 'get', //데이터 전송 타입,
            url: _PAGE_URL + 'apidataset/keyp', //데이터를 주고받을 파일 주소 입력,
            //data: JSON.stringify(templateInfo), //보내는 데이터,
            dataType: 'JSON', //문자형식으로 받기 , 
            contentType: "application/json",
            success: function (result) {
                compareID(result, templateID)
            },
            error: function () {
                alert("error");
            }
        });
    }

    /*
    파라미터 아이디와 키포인트 아이디를 비교한 후, 필요한 정보만 만들어주는 함수
    */
    function compareID(result, templateID) {
        for (var i = 0; i < result.length; i++) {
            if (result[i]._id == templateID) {
                drawExistInfo(result[i]);
                return;
            }
        }
    }
    /*
    존재하는 정보 화면에 그려주기
    */
    function drawExistInfo(result) {
        console.log(result)
        document.getElementById("template-name").value = result.kypt_name;
        document.getElementById("template-color").value = result.kypt_json.categories[0].color;

        //바운딩박스 선택했을 때
        if (result.kypt_json.annotations[0].bbox_type !== 0) {
            document.getElementById("btn-boundingbox").checked = true;
            typeClick("boundingbox");

            $("#type-boundingbox").show();

            switch (result.kypt_json.annotations[0].bbox_type) {
                case 1:
                    document.getElementById("type-1").checked = true;
                    selectBboxdraw("type-1");
                    break;
                case 2:
                    document.getElementById("type-2").checked = true;
                    selectBboxdraw("type-2");
                    break;
                case 3:
                    document.getElementById("type-3").checked = true;
                    selectBboxdraw("type-3");
                    break;
            }

            document.getElementById("bbox-x").value = result.kypt_json.annotations[0].bbox[0];
            document.getElementById("bbox-y").value = result.kypt_json.annotations[0].bbox[1];
            document.getElementById("bbox-w").value = result.kypt_json.annotations[0].bbox[2];
            document.getElementById("bbox-h").value = result.kypt_json.annotations[0].bbox[3];

        } else {
            document.getElementById("btn-boundingbox").checked = false;
            $("#type-boundingbox").hide();
        }

        //키포인트 선택했을 때
        if (result.kypt_json.annotations[0].num_keypoints > 0) {
            document.getElementById("btn-keypoint").checked = true;
            typeClick("keypoint");

            connectingInfo = result.kypt_json.categories[0].skeleton; //초기값을 만들어준다.
            keyinfo = result.kypt_json.annotations[0].keypoints; //초기값을 만들어준다.

            drawpointsindex(result);

        } else {
            document.getElementById("btn-keypoint").checked = false;
            $("#type-keypoint").hide();
        }
    }

    /*
    키포인트의 json 정보를 입력할 수 있는 input 칸을 만들어준다.
    */
    function listkeypoints() {
        listItem = "";

        console.log(keypoints);
        if (keypoints.length > 0) {
            for (i = 0; i < keypoints.length; i++) {
                // listItem += '<div>index = ' + i + ' x= ' + keypoints[i].x + ' y = ' + keypoints[i].y + '</div>';

                listItem += `<div class="row row-cols-3  my-2">
                    <div class="col col-2 d-flex align-items-center">
                        <div id="point-name${i}">${i}</div>
                    </div>
                    <div class="col col-5">
                        <input type="text" id="x${i}" class="form-control form-control-sm"aria-describedby="addon-wrapping" value="${noneInputCheck(inputXY[i], "x")}"> 
                    </div>
                    <div class="col col-5">
                        <input type="text" id="y${i}" class="form-control form-control-sm" aria-describedby="addon-wrapping" value="${noneInputCheck(inputXY[i], "y")}">
                    </div>
                </div>`;
            }
            //console.log(listItem);
            divkeylist.innerHTML = listItem;
        }
    }

    function noneInputCheck(obj, num) {
        if (typeof obj == "undefined") {
            return "";
        }
        else {
            if (num == "x") { return obj.x; }
            if (num == "y") { return obj.y; }
        }
    }

    //키포인트 input - json을 만들어준다.
    function inputKeypointinfo(result, keypointTotal) {
        var jsoninfo = result.kypt_json.annotations[0].keypoints_json;

        for (i = 0; i < keypointTotal; i++) {
            inputXY.push({
                x: jsoninfo[i][0],
                y: jsoninfo[i][1]
            })
        }

        listkeypoints();
    }

    function chunk(data = [], size = 1) {
        const arr = [];

        for (let i = 0; i < data.length; i += size) {
            arr.push(data.slice(i, i + size));
        }

        return arr;
    }

    async function drawpointsindex(result) {

        const canvas = document.getElementById("poseCanvas");
        const ctx = canvas.getContext('2d');
        const {
            width,
            height
        } = canvas.getBoundingClientRect();

        var totalkeynum = result.kypt_json.annotations[0].num_keypoints;
        var keypointinfo = result.kypt_json.annotations[0].keypoints;
        var keypointname = result.kypt_json.categories[0].keypoints;
        var keypointarr = chunk(keypointinfo, 2);
        var linkInfo = result.kypt_json.categories[0].skeleton;

        // Draw keypoints
        for (var i = 0; i < totalkeynum; i++) {
            console.log(keypointarr[i][0], keypointarr[i][1]);

            newKeypoint = {
                count: i,
                x: keypointarr[i][0],
                y: keypointarr[i][1]
            };
            count++;
            keypoints.push(newKeypoint);

            ctx.beginPath();
            ctx.arc(keypointarr[i][0], keypointarr[i][1], 5, 0, 2 * Math.PI);
            ctx.fillStyle = 'blue';
            ctx.fill();
            ctx.closePath();

            // Draw the text with the key value over the point
            ctx.font = '16px Arial';
            ctx.fillStyle = 'Black';
            ctx.fillText(keypointname[i], keypointarr[i][0], keypointarr[i][1] + 24);
        }
        console.log(keypoints);

        // Draw lines
        for (var i = 0; i < linkInfo.length; i++) {
            var fromlink = linkInfo[i][0];
            var tolink = linkInfo[i][1];

            lines.push({
                from: {
                    x: keypointarr[fromlink][0],
                    y: keypointarr[fromlink][1]
                },
                to: {
                    x: keypointarr[tolink][0],
                    y: keypointarr[tolink][1]
                }
            });

            ctx.beginPath();
            ctx.moveTo(keypointarr[fromlink][0], keypointarr[fromlink][1]);
            ctx.lineTo(keypointarr[tolink][0], keypointarr[tolink][1]);
            ctx.strokeStyle = "red";
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.closePath();
        }

        inputKeypointinfo(result, result.kypt_json.annotations[0].num_keypoints);

    }
</script>

</html>