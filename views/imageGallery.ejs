<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Label Viewer</title>
    <script language="javascript" type="text/javascript" src="js/jquery-3.6.4.min.js"></script>
    <script language="javascript" type="text/javascript" src="js/bootstrap.bundle.js"></script>
    <script language="javascript" type="text/javascript" src="js/fontawesome.all.min.js"></script>
    <script language="javascript" type="text/javascript" src="js/jquery.nanogallery2.js"></script>
    <link rel="stylesheet" type="text/css" href="css/bootstrap.min.css">
    <link rel="stylesheet" type="text/css" href="css/fontawesome.all.css">
    <link rel="stylesheet" type="text/css" href="css/nanogallery2.min.css">
    <link rel="stylesheet" type="text/css" href="css/main.css">
    <script language="javascript" type="text/javascript" src="js/globalconst.js"></script>

</head>
<style>
    .card {
        height: 280px;
    }

    .btn-check:checked+.btn {
        box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 6px, rgba(0, 0, 0, 0.23) 0px 3px 6px;
    }

    ::-webkit-scrollbar {
        width: 8px;
        /* 스크롤바의 너비 */
    }

    ::-webkit-scrollbar-thumb {
        height: 30%;
        /* 스크롤바의 길이 */
        background: #217af4;
        /* 스크롤바의 색상 */

        border-radius: 10px;
    }

    ::-webkit-scrollbar-track {
        background: rgba(33, 122, 244, .1);
        /*스크롤바 뒷 배경 색상*/
    }

    .labelcanvasgallery {
        display: block;
    }
</style>
<!--

-->

<body>
    <div class="d-flex">
        <div class="col">
            <%- include('./header') %>
        </div>
        <div class="col align-self-center d-flex justify-content-end" style="float: right; margin-right: 2em;">
            <i class="fa-solid fa-arrow-left" style="font-size: 36px; cursor: pointer;"
                onclick="pageMove('gallerylist')"></i>
        </div>
    </div>
    <div class="container-fluid">
        <div class="row my-2">
            <div class="col-2">
                <div style="color: #666666;">Gallery Name</div>
                <div id="galleryname">Gallery Name</div>
            </div>
            <div class="col-8">
                <div style="color: #666666;">Label Show</div>
                <div id="divlabeltemplate">
                    <input type="checkbox" class="btn-check" id="btn-none" name="none" autocomplete="off"
                        onclick="clickLabel(this.name); draw();">
                    <label class="btn" for="btn-none" style="background-color: #f4f4f4;">none</label>

                    <input type="checkbox" class="btn-check" name="tag-label" id="B-box-soccer"
                        onclick="clickLabel(this.name);" autocomplete="off">
                    <label class="btn tag-label" for="B-box-soccer"
                        style="background-color: #FFB9B9;">B-box-soccer</label>

                    <input type="checkbox" class="btn-check " name="tag-label" id="B-box-s"
                        onclick="clickLabel(this.name);" autocomplete="off">
                    <label class="btn tag-label" for="B-box-s" style="background-color: #D9D9D9;">B-box-s</label>
                </div>
            </div>
            <div class="col-2 d-flex align-items-end justify-content-end">
                <button type="button" class="btn btn-outline-secondary" id="btn-edit-gallery"
                    onclick="pageMove('selecttemplate')">Set Template</button>
            </div>
        </div>

        <div style="overflow-y: scroll; height:75vh;">
            <div ID="imageGallery"></div>
        </div>

        <div class="d-flex justify-content-between my-2" style="background-color: #fff;">
            <div class="col align-self-center">
                <span style="color: #666666;">Total</span>
                <span id="totalcount"></span>
            </div>
            <div class="col d-flex align-items-end gap-2" style="justify-content: flex-end;">
                <button class="btn btn-outline-secondary" onclick="countPage('down');">
                    <i class="fa-solid fa-chevron-left align-self-center" style="font-size: 20px;"></i>
                </button>
                <div class="input-group align-self-center" style="width: 4em;">
                    <input type="number" class="form-control" id="page-count" value="1" aria-label="pageCount" min="1"
                        aria-describedby="basic-addon1" onchange="countPage(this.value);">
                </div>
                <div class="align-self-center">/</div>
                <div class="align-self-center" id="page-total"></div>
                <button class="btn btn-outline-secondary" onclick="countPage('up');">
                    <i class="fa-solid fa-chevron-right align-self-center" style="font-size: 20px;"></i>
                </button>
                <!--<button type="button" class="btn btn-primary" id="liveToastBtn">Show live toast</button>-->

            </div>
        </div>

        <div class="toast-container position-fixed bottom-0 end-0 p-3">
            <div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header">
                    <strong class="me-auto">Bootstrap</strong>
                    <small>11 mins ago</small>
                    <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
                </div>s
                <div class="toast-body">
                    Hello, world! This is a toast message.
                </div>
            </div>
        </div>

        <input type="text" value="" id="copyinput" style="display: none;">
    </div>
</body>
<script>
    /* 
    labelingInfo[0].pose.location.흉골.x
    
    var { labelingInfo: [{ pose: { location: { 흉골: { x } } } }] } = obj;
    
    */


    const toastTrigger = document.getElementById('liveToastBtn')
    const toastLiveExample = document.getElementById('liveToast')
    const urlParams = new URLSearchParams(window.location.search);
    const sto_id = urlParams.get('source_list_sto');
    const dataset_id = urlParams.get('dataset_id');
    var linecolor = [];
    var xylocationlist = [];
    var linklines = [];
    var listformatedkeys = [];
    var labelKeypoint; 
    var templateList;
    var templateKeyMatch = [];

    if (toastTrigger) {
        const toastBootstrap = bootstrap.Toast.getOrCreateInstance(toastLiveExample)
        toastTrigger.addEventListener('click', () => {
            toastBootstrap.show()
        })
    }

    function pageMove(page) {
        var params;
        var url = _PAGE_URL;
        switch (page) {
            case "selecttemplate":
                params = "selecttemplate?source_list_sto=" + sto_id + "&dataset_id=" + dataset_id;
                break;
            case "gallerylist":
                params = "gallerylist"
                break;
        }
        window.location.href = url + params;

    }


    $(document).ready(function () {
        //console.log(sto_id);
        if (sto_id) {
            getDatasetInfo(1);
        } else {
            getImage(1, '');
        }
    });

    var img_folder = '';
    var label_folder = '';


    async function getDatasetInfo(page) {
        listformatedkeys = [];

        var apiUrl = _PAGE_URL + 'apidataset/getdataset?datasetId=' + dataset_id;
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            //console.log('getdatasetinfo')
            const datasetInfo = await response.json();
            //console.log(datasetInfo);
            const divgalleryname = document.getElementById('galleryname');
            divgalleryname.innerHTML = '';
            divgalleryname.innerHTML = datasetInfo.dataset_name;
            img_folder = datasetInfo.image_location;
            label_folder = datasetInfo.label_location;
            //console.log(datasetInfo.kypt_id.length)
            if (datasetInfo.kypt_id.length >= 0) {
                keytemplates = datasetInfo.kypt_id
                const divlabeltemp = document.getElementById('divlabeltemplate');
                divlabeltemp.innerHTML = '';
                keytemplates.forEach(function (keytemplate) {
                    getKeyTemplate(keytemplate);
                })
            } else {
                const divlabeltemp = document.getElementById('divlabeltemplate');
                divlabeltemp.innerHTML = '';
                divlabeltemp.innerHTML = 'Add Template';
            }

            getImage(page, sto_id, img_folder, label_folder);
        } catch (error) {
            //console.error('Error fetching data:', error);
        }
    }


    async function getKeyTemplate(kypt_id) {
        var apiUrl = _PAGE_URL + 'apidataset/getkeyp?keypointId=' + kypt_id;
        try {
            const response = await fetch(apiUrl);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            //console.log('getGetKeypointInfo');
            const kyptTempInfo = await response.json();
            //console.log(kyptTempInfo);
            const bgcolor = colorWithTransparency(kyptTempInfo.kypt_json.categories[0].color, 0.4)
            const divlabeltemp = document.getElementById('divlabeltemplate');
            divlabeltemp.innerHTML += `
            <input type="checkbox" class="btn-check" id="${kyptTempInfo.kypt_name}" name="btn-template" autocomplete="off" 
            value="${kypt_id}" onclick="toggleCanvasVisibility('labelcanvasgallery','${kyptTempInfo.kypt_name}'); drawSelectTemplate();" checked>
            <label class="btn mx-1" for="${kyptTempInfo.kypt_name}" style="background-color: ${bgcolor};">
                    <div id="eye-icon${kyptTempInfo.kypt_name}"><i class="fas fa-eye"></i>${kyptTempInfo.kypt_name}</div>
            </label>`;
            linecolor.push(kyptTempInfo.kypt_json.categories[0].color);
            const xylocListPush = {
                keypoint_id: kypt_id,
                keyjsonpt: kyptTempInfo.kypt_json.annotations[0].keypoints_json,
                keyjsoncolor: kyptTempInfo.kypt_json.categories[0].color
            }
            xylocationlist.push(xylocListPush);
            //console.log(xylocationlist);
            linklines.push({
                keypoint_id: kypt_id,
                lines: kyptTempInfo.kypt_json.categories[0].skeleton,
                linescolor: kyptTempInfo.kypt_json.categories[0].color
            });
        } catch (error) {
            //console.error('Error fetching data:', error);
        }
    };

    //class = labelcanvasgallery
    function toggleCanvasVisibility(className, kypt_name) {
        return;
        const canvases = document.querySelectorAll(`canvas.${className}`);
        //console.log(canvases);
        canvases.forEach(function (canvas) {
            const name = canvas.getAttribute('name');
        });
        const eyeIcon = document.getElementById('eye-icon' + kypt_name);
        const checkTemp = document.getElementById(kypt_name);

        canvases.forEach(canvas => {
            canvas.style.display = canvas.style.display === 'none' ? 'block' : 'none';
        });

        if (checkTemp.checked) {
            eyeIcon.innerHTML = '<i class="fas fa-eye"></i> ' + kypt_name;

        } else {
            eyeIcon.innerHTML = '<i class="fas fa-eye-slash"></i> ' + kypt_name;

        }


    }


    function hexToRGBA(hex, alpha = 1) {
        const r = parseInt(hex.slice(1, 3), 16);
        const g = parseInt(hex.slice(3, 5), 16);
        const b = parseInt(hex.slice(5, 7), 16);

        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    };

    function colorWithTransparency(hex, transparency) {
        return hexToRGBA(hex, transparency);
    };


    function getObjectBeforeIndex(path, obj) {
        const parts = path;

        let currentObj = obj;



        for (const part of parts) {
            currentObj = currentObj[part];
            if (currentObj === undefined) {
                return undefined;
            }
        }
        return currentObj;
    }


    function getObjectReference(path, obj) {
        const parts = path.split(">>");
        let currentObj = obj;

        for (const part of parts) {
            currentObj = currentObj[part];
            if (currentObj === undefined) {
                return undefined;
            }
        }
        return currentObj;
    }

    function getObjectReferenceIndex(valuesBefore, index, valuesAfter, obj) {
        const partsBefore = valuesBefore;
        const partsAfter = valuesAfter;
        const parts = [...partsBefore, index, ...partsAfter];

        let currentObj = obj;

        for (const part of parts) {
            currentObj = currentObj[part];
            if (currentObj === undefined) {
                return undefined;
            }
        }

        return currentObj;
    }


    function valuesBeforeText(arr, text) {
        const result = [];
        let found = false;

        for (let i = 0; i < arr.length; i++) {
            if (arr[i] === text) {
                found = true;
                break;
            }
            result.push(arr[i]);
        }

        return found ? result : [];
    }




    function getImage(pageCount, stoid, img_folder, label_folder) {
        //console.log(pageCount);
        var env_path = 'D:\\MgnSData\\Datas\\';

        $.ajax({
            type: 'get', //데이터 전송 타입,
            url: _WEBSERVER_ROOT_URL +
                'MediaList?StorageID=' + stoid + '&PageNum=' + pageCount +
                '&CountOfPage=50&MediaState=&SortType=1&MediaType=&MediaTitle=&AddDateStart=&AddDateEnd=&ExceptDelete=',
            //data: datasetInfo,
            //보내는 데이터,
            dataType: 'JSON', //문자형식으로 받기 , 
            success: function (result) {
                //console.log(result);
                imagePath(result, img_folder, label_folder);
                document.getElementById("totalcount").innerText = result.totalcount.toLocaleString(
                    'ko-KR');
                document.getElementById("page-total").innerText = parseInt(result.totalcount / 50) + 1;
            },
            error: function () {
                alert("error");
            }
        })
    }

    /* misun
    D/I의 Image path를 만들어준다. 
    result information: 
    api : http://49.50.160.122:9070/OpenAPI/Report/DetectionImageView/All
    errorinfo

    Apipath: D:\\MgnSData\\Datas\\2022\\7\\22\\9\\24863\\Thumb_24863_0_0x80000000_0.jpg
    Imagepath: http://49.50.160.122:3000/errorimages/2022/7/22/9/24863/24863_0_0x80000000_0.jpg
    */
    function imagePath(result, img_folder, label_folder) {
        //console.log('imagePath');
        //console.log(img_folder);

        var data = result.mediainfo;
        //console.log(data)

        //url 매핑을 위해 url을 만들어준다.

        var originParam, excludeParam, jsonParam;
        var pathArr = [];
        var jsonArr = [];

        for (i = 0; i < data.length - 1; i++) {
            //originParam = result.errorinfo[i].thumbnailpath;
            originParam = img_folder + data[i].mediapath + data[i].title;
            if (originParam != "") {

                excludeParam = 'D:\\MgnSData\\Datas\\';
                originParam = originParam.replace(excludeParam, img_folder);
                originParam = originParam.replace("Thumb_", "");


                originParam = originParam.replace(/\\/ig, "/");
                //originParam = originParam.replace(/\\/ig, "/");
                jsonParam = originParam.replace(/JPG|\.jpg/g, (match) => {
                    if (match === "JPG") {
                        return "JSON";
                    } else if (match === ".jpg") {
                        return ".json";
                    }
                });


                object = {
                    src: originParam,
                    srct: originParam,
                    title: data[i].title
                }
                pathArr.push(object);
                jsonArr.push(jsonParam);
            }
        }
        makeGallery(pathArr);
        transfUrlJson(jsonArr);
    }

    /*갤러리를 보여준다*/



    function makeGallery(pathArr, jsonArr) {
        var myLightboxTool = function (customElementName, $customIcon, item) {
            alert('Media title :' + item.title);
        }

        //$('#imageGallery').nanogallery2('refresh');
        $('#imageGallery').nanogallery2('destroy');
        $("#imageGallery").nanogallery2({
            // ### gallery settings ###
            thumbnailHeight: 300,
            thumbnailWidth: "auto",
            itemsBaseURL: _WEBSERVER_DI_URL,
            thumbnailBorderVertical: 0,
            thumbnailBorderHorizontal: 0,
            colorScheme: {
                thumbnail: {
                    background: "rgba(255,255,255,100)"
                }
            },
            thumbnailLabel: {
                position: "overImageOnBottom",
                display: true,
                displayDescription: true,
                hideIcons: false,
            },
            thumbnailAlignment: "center",
            galleryMaxItems: 50,
            lazyLoad: false, // Disable lazy loading
            pagination: false, // Disable pagination
            thumbnailGutterWidth: 5,
            thumbnailGutterHeight: 5,
            thumbnailOpenImage: true,
            viewerToolbar: {
                standard: 'minimizeButton, label, shareButton, fullscreenButton',
                minimized: 'minimizeButton, label, fullscreenButton, downloadButton, infoButton'
            },
            viewerTools: {
                topLeft: 'label',
                topRight: 'labelButton, copyButton, playPauseButton, zoomButton, fullscreenButton, viewerShoppingcart, closeButton '
            },
            icons: {},
            fnImgToolbarCustClick: myToolbarCustClick,
            // ### gallery content ###
            items: pathArr
        });
        //console.log('makegallery')
    }




    // Click event on custom lightbox toolbar element
    function myToolbarCustClick(customElementName, $customIcon, item) {
        // Display the title of the current displayed image
        if (customElementName == 'custom1') {
            //alert('Image path: ' + item.src);
            var tempElement = document.createElement("textarea");
            document.body.appendChild(tempElement);
            tempElement.value = item.src;
            tempElement.select();
            document.execCommand('copy');
            document.body.removeChild(tempElement);
        }
    }


    /*
    템플릿을 선택하지 않는 경우에 대한 행동 처리
    :템플릿을 선택하면 none 선택 풀리고, none선택하면 템플릿 선택 못함

    라벨 리스트 : name="tag-label"
    */
    /*
     function allLabel(buttonAll) {
         if (buttonAll.checked == true) {
             $("input:checkbox[name='tag-label']").prop("checked", true);
         } else {
             $("input:checkbox[name='tag-label']").prop("disabled", false);
         }
     }*/
    function clickLabel(buttonName) {
        if (buttonName == "none") {
            $("input:checkbox[name='tag-label']").prop("checked", false);
        }
        if (buttonName == "tag-label") {
            $("input:checkbox[name='none']").prop("checked", false);
        }
    }


    /*
    페이지 카운트를 높이고 줄인다.
    pagecount : id = page-count
    */
    function countPage(attr) {
        xylocationlist = [];
        linklines = [];
        var pageCnt = document.getElementById("page-count").value;
        var pageMax = Number(document.getElementById("page-total").innerText);

        if (attr == "up") {
            if (pageCnt >= pageMax) {
                return;
            }
            document.getElementById("page-count").value = Number(pageCnt) + 1;

            getDatasetInfo(Number(pageCnt) + 1);

        }
        if (attr == "down") {
            if (pageCnt <= 1) {
                return;
            }

            document.getElementById("page-count").value = Number(pageCnt) - 1;

            getDatasetInfo(Number(pageCnt) - 1);

        }
    }






    async function fetchAndCombineJson(urlList) {
        const jsonPromises = urlList.map(async (url) => {
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response.json();
        });

        try {
            const combinedJsonArray = await Promise.all(jsonPromises);
            labelKeypoint = combinedJsonArray;
            selectTemplate();

            //combinedJsonTemplate(combinedJsonArray);
        } catch (error) {
            console.error('Error fetching JSON data:', error);
        }
    }

    function transfUrlJson(jsonArr) {
        var jsonlistgalery = [];
        jsonArr.forEach((json) => {
            var jsonUrlLoc = _WEBSERVER_DI_URL + json;
            jsonlistgalery.push(jsonUrlLoc);
        });
        fetchAndCombineJson(jsonlistgalery);
    }

    //템플릿을 선택한다.
    function selectTemplate() {

        var selectedID = new Array();
        $("input[name='btn-template']").each(function () {
            var tmpVal = $(this).val();
            selectedID.push(tmpVal);
        });

        templateKeyMatch = [];
        
        templateList = xylocationlist;
        for (var i = 0; i < selectedID.length; i++) {
            $.each(templateList, function (index, row) {
                if (templateList[index].keypoint_id == selectedID[i]) {
                    var list = combinedJsonTemplate(labelKeypoint, templateList[index]);
                    var formatedkey = {
                        "keypoint_id": selectedID[i],
                        "keypoint_list": list
                    };
                    templateKeyMatch.push(formatedkey);
                }
            });
        }

    }


    function waitForCanvas(i) {
        return new Promise((resolve) => {
            setTimeout(() => {
                //console.log('Function wait 1s is finished');
                resolve();
            }, 300);
        });
    }




    function combinedJsonTemplate(JSONlist, templateList) {
        listformatedkeys = [];
        for (let i = 0; i < JSONlist.length; i++) { //JSONlist.length
            const listofpoints = [];
            for (let k = 0; k < templateList.keyjsonpt.length; k++) {
                const pathx = templateList.keyjsonpt[k][0];
                const pathy = templateList.keyjsonpt[k][1];
                const Xparts = pathx.split(">>");
                const Yparts = pathy.split(">>");
                const valueBeforeText = valuesBeforeText(Xparts, 'index');
                if (valueBeforeText == "") {
                    const valuex = getObjectReference(pathx, JSONlist[i]);
                    const valuey = getObjectReference(pathy, JSONlist[i]);
                    const multipliedValue = {
                        x: valuex * 0.1555,
                        y: valuey * 0.14,
                        key: templateList.keyjsoncolor
                    };
                    listofpoints.push(multipliedValue);
                }


            }
            var formatedkey = {
                "keypoints": listofpoints
            };
            listformatedkeys.push(formatedkey);
        }
        return listformatedkeys;
    }
    /*
        x: value.x * 0.1555,
                        y: value.y * 0.14,
    */



    function XvaluesBeforeAndAfterText(arr, text) {
        const xvaluesBefore = [];
        const xvaluesAfter = [];
        let indexFound = false;

        for (let i = 0; i < arr.length; i++) {
            if (arr[i] === text) {
                indexFound = true;
                continue;
            }
            if (indexFound) {
                xvaluesAfter.push(arr[i]);
            } else {
                xvaluesBefore.push(arr[i]);
            }
        }

        if (!indexFound) {
            return {
                xvaluesBefore: [],
                xvaluesAfter: []
            };
        }
        return {
            xvaluesBefore,
            xvaluesAfter
        };
    }

    function YvaluesBeforeAndAfterText(arr, text) {
        const yvaluesBefore = [];
        const yvaluesAfter = [];
        let indexFound = false;

        for (let i = 0; i < arr.length; i++) {
            if (arr[i] === text) {
                indexFound = true;
                continue;
            }
            if (indexFound) {
                yvaluesAfter.push(arr[i]);
            } else {
                yvaluesBefore.push(arr[i]);
            }
        }

        if (!indexFound) {
            return {
                yvaluesBefore: [],
                yvaluesAfter: []
            };
        }
        return {
            yvaluesBefore,
            yvaluesAfter
        };
    }

    async function drawpointsindex(idx) {
        await waitForCanvas();
        const index = idx - 1;
        const canvasindex = "canvas" + (index + 1);
        const zoomcanvindex = "canvas" + (index + 1);

        const canvas = document.getElementById(canvasindex);
        const ctx = canvas.getContext('2d');
        //const zoomcanv = document.getElementById(zoomcanvindex)
        //const zctx = zoomcanv.getContext('2d');

        var selectedID = [];
        $("input[name='btn-template']:checked").each(function () {
            var tmpVal = $(this).val();
            selectedID.push(tmpVal);
        });
        /*선택한 템플릿에 맞는 키포인트를 그린다.*/

        //console.log(templateKeyMatch); // 6
        templateKeyMatch.forEach((list, ind) => {
                list.keypoint_list[index].keypoints.forEach(point => {
                    var pointcolor = point.key;
                    ctx.beginPath();
                    ctx.arc(point.x, point.y, 2, 0, 2 * Math.PI);
                    ctx.fillStyle = pointcolor;
                    ctx.fill();
                    ctx.strokeStyle = pointcolor;
                    ctx.lineWidth = 0.5;
                    ctx.stroke();
                    ctx.closePath();
                });
        })


        // Draw lines
        //console.log(linklines);

        if (linklines.length == 0) {
            linklines.lines.forEach(line => {
                const from = listformatedkeys[index].keypoints[line[0]];
                const to = listformatedkeys[index].keypoints[line[1]];

                ctx.beginPath();
                ctx.moveTo(from.x, from.y);
                ctx.lineTo(to.x, to.y);
                ctx.strokeStyle = linecolor;
                ctx.lineWidth = 1;
                ctx.stroke();
                ctx.closePath();
            });
        } else {


            //console.log(linklines);
            for (i = 0; i < linklines.length; i++) {
                linklines[i].lines.forEach((line, ind) => {
                        var linecolor = linklines[i].linescolor;
                        const from = templateKeyMatch[i].keypoint_list[index].keypoints[line[0]];
                        const to = templateKeyMatch[i].keypoint_list[index].keypoints[line[1]];

                        ctx.beginPath();
                        ctx.moveTo(from.x, from.y);
                        ctx.lineTo(to.x, to.y);
                        ctx.strokeStyle = linecolor;
                        ctx.lineWidth = 1;
                        ctx.stroke();
                        ctx.closePath();
                });

            }
        }


    }

    //-------------------------------------------------------------------
    //select template

    function drawSelectTemplate() {

        try {
            for (index = 0; index < 49; index++) {
                const canvasindex = "canvas" + (index + 1);

                const canvas = document.getElementById(canvasindex);
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, canvas.width, canvas.height);


                var selectedID = [];
                $("input[name='btn-template']:checked").each(function () {
                    var tmpVal = $(this).val();
                    selectedID.push(tmpVal);
                })


                /*선택한 템플릿에 맞는 키포인트를 그린다.*/
                templateKeyMatch.forEach((list, ind) => {
                    selectedID.forEach((selected) => {
                        if (list.keypoint_id == selected) {
                            list.keypoint_list[index].keypoints.forEach(point => {
                                pointcolor = point.key;
                                ctx.beginPath();
                                ctx.arc(point.x, point.y, 2, 0, 2 * Math.PI);
                                ctx.fillStyle = pointcolor;
                                ctx.fill();
                                ctx.strokeStyle = pointcolor;
                                ctx.lineWidth = 0.5;
                                ctx.stroke();
                                ctx.closePath();
                            });
                        }
                    });



                })


                // Draw lines

                //console.log(linklines);
                for (i = 0; i < linklines.length; i++) {
                    linklines[i].lines.forEach((line, ind) => {
                        selectedID.forEach((selected) => {
                            if (linklines[i].keypoint_id == selected) {
                                var linecolor = linklines[i].linescolor;
                                const from = templateKeyMatch[i].keypoint_list[index].keypoints[line[0]];
                                const to = templateKeyMatch[i].keypoint_list[index].keypoints[line[1]];

                                ctx.beginPath();
                                ctx.moveTo(from.x, from.y);
                                ctx.lineTo(to.x, to.y);
                                ctx.strokeStyle = linecolor;
                                ctx.lineWidth = 1;
                                ctx.stroke();
                                ctx.closePath();
                            }
                        });
                    });

                }
            }
        } catch (err) {
            return;
        }

    }

    //---------------------Draw Template---------------------------------

    function drawCanvas(data, i) {
        //console.log(data);
        //console.log(i);
        const canvasindex = "canvas" + i;
        const canvas = document.getElementById(canvasindex);
        const ctx = canvas.getContext('2d');

        // Draw keypoints
        data.keypoints.forEach(point => {
            ctx.beginPath();
            ctx.arc(point.x, point.y, 5, 0, 2 * Math.PI);
            ctx.fillStyle = 'blue';
            ctx.fill();
            ctx.closePath();

            // Draw the text with the key value over the point
            ctx.font = '12px Arial';
            ctx.fillStyle = 'black';
            ctx.fillText('TEXTO', point.x + 8, point.y + 4);
        });

        // Draw lines
        data.lines.forEach(line => {
            ctx.beginPath();
            ctx.moveTo(line.from.x, line.from.y);
            ctx.lineTo(line.to.x, line.to.y);
            ctx.strokeStyle = 'red';
            ctx.lineWidth = 2;
            ctx.stroke();
            ctx.closePath();
        });
    }

    //Light box
    function lightboxDrawTemplate() {
        let url = document.location.href;
        var sectionId = url.split("#");
        var canvasId = sectionId[1].split("/");
        var canvasIndex = canvasId[3] % 49;

        const canvas = document.getElementById("zoomcanv" + canvasIndex);
        const ctx = canvas.getContext('2d');
        $("#zoomcanv" + canvasIndex).toggleClass('onlabel');

        if ($("#zoomcanv" + canvasIndex).hasClass("onlabel") === true) {

            ctx.clearRect(0, 0, canvas.width, canvas.height);
            width = canvas.clientWidth;
            height = canvas.clientHeight;

            ctx.width = width;
            ctx.height = height;

            listformatedkeys[canvasIndex - 1].keypoints.forEach(point => {
                var pointcolor = point.key;
                ctx.beginPath();
                ctx.arc(point.x, point.y, 2, 0, 2 * Math.PI);
                ctx.fillStyle = pointcolor;
                ctx.fill();
                ctx.strokeStyle = pointcolor;
                ctx.lineWidth = 0.5;
                ctx.stroke();
                ctx.closePath();
            });

            // Draw lines        
            for (i = 0; i < linklines.length; i++) {

                linklines[i].lines.forEach(line => {
                    const from = listformatedkeys[canvasIndex - 1].keypoints[line[0]];
                    const to = listformatedkeys[canvasIndex - 1].keypoints[line[1]];

                    ctx.beginPath();
                    ctx.moveTo(from.x, from.y);
                    ctx.lineTo(to.x, to.y);
                    ctx.strokeStyle = linklines[i].linescolor;;
                    ctx.lineWidth = 1;
                    ctx.stroke();
                    ctx.closePath();
                });
            }

        } else {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
    }

    //lightbox copy button
    function getPath() {
        var path = jQuery('.nGY2ViewerMedia').attr("src");
        var copyText = document.getElementById("copyinput");
        copyText.value = path;

        // Select the text field
        copyText.select();
        copyText.setSelectionRange(0, 99999); // For mobile devices

        // Copy the text inside the text field
        navigator.clipboard.writeText(copyText.value);

        // Alert the copied text
        alert("Copy Image URL : " + copyText.value);
    }
</script>

</html>